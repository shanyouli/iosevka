on:
  schedule:
    - cron: '0 0 * * 5' # 每周五的 UTC 时间 00:00 执行（可根据需要调整时区）
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RUN_BUILD: ${{ github.event_name == 'workflow_dispatch' && 'true' || 'false' }}
    steps:
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            extra-experimental-features = nix-command flakes
            allow-import-from-derivation = true

      # - name: Install Magic Nix Cache
      #   uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare github bot
        run: |
          git config --local user.email "flakebot@users.noreply.github.com"
          git config --local user.name "flakebot"
      - name: update source
        run: |
          old_commit=$(git rev-parse --short=7 HEAD)
          cat > secrets.toml <<EOF
          [keys]
          github = "${{ secrets.GITHUB_TOKEN }}"
          EOF
          nix run .#upnvfetcher
          if [[ "$(git rev-parse --short=7 HEAD)" != "${old_commit}" ]]; then
             echo "RUN_BUILD=true" >> $GITHUB_ENV
             echo "TAG_NAME=$(jq -r '.iosevka.version' _sources/generated.json)" >> $GITHUB_ENV
          fi
      - name: Build
        if: ${{ env.RUN_BUILD  == 'true' }}
        run: |
          nix run .#ci
      # - name: get lastest tag
      #   if: ${{ env.RUN_BUILD  == 'true' }}
      #   run: |
      #     LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
      #     if [[ $LATEST_TAG == ${{env.TAG_NAME}} ]];
      #       echo "TAG_NAME=${TAG_NAME}-$(date +%s)" >> $GITHUB_ENV
      #     fi

      # - name: download LXGWWenKaiMono
      #   if: ${{ env.RUN_BUILD  == 'true' }}
      #   run: |
      #     lxgw_tag=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       https://api.github.com/repos/lxgw/LxgwWenKai/releases/latest | jq -r .tag_name)
      #     wget https://github.com/lxgw/LxgwWenKai/releases/download/${lxgw_tag}/LXGWWenKaiMono-Regular.ttf
      # - name: Download Warcarft-Font-Merger
      #   if: ${{ env.RUN_BUILD  == 'true' }}
      #   run: |
      #     warcarft_font_tag=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       https://api.github.com/repos/nowar-fonts/Warcraft-Font-Merger/releases/latest | jq -r .tag_name)
      #     wget https://github.com/nowar-fonts/Warcraft-Font-Merger/releases/download/${warcrft_font_tag}/WarFontMerger-XS-${warcarft_font_tag//v/}-linux.amd64.tar.xz
      #     tar -xvf WarFontMerger-XS-${warcarft_font_tag//v/}-linux-amd64.tar.xz
      - name: extra-en-font
        # if: ${{ env.RUN_BUILD  == 'true' }}
        run: |
          unzip ./dist/pragma-sevka-mono.zip
          unzip ./dist/pragma-sevka-mono-nerd.zip
          tree .

      # - name: Push changes
      #   if: ${{ env.RUN_BUILD  == 'true' }}
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     force: true
      # - name: upload-release-assets
      #   if: ${{ env.RUN_BUILD  == 'true' }}
      #   uses: xresloader/upload-to-github-release@v1
      #   with:
      #     file: "./dist/*.zip"
      #     tag_name: ${{ env.TAG_NAME }}
      #     tags: true
      #     draft: false
      #     overwrite: true
      #     default_release_name: "Release ${{ env.TAG_NAME }}"
      #     default_release_body: "update font version ${{ env.TAG_NAME }}"
